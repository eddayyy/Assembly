     1                                  ; Author: Eduardo Nunez
     2                                  ; Author email: eduardonunez@csu.fullerton.edu
     3                                  ; Program: Pure Assembly In 2022
     4                                  ; File: main.asm, assembly
     5                                  ; Requirements: 
     6                                  ; 1) welcome msg, 2) time in tics, 3) inputs a float in degrees
     7                                  ; outputs same # for confirmation, 4) converts degree # to radian
     8                                  ; computes cosine of the radian, 5) shows # of tics, 6) says goodbye 
     9                                  
    10                                  
    11                                  global _start
    12                                  section .data
    13 00000000 57656C636F6D652074-         welcomePhrase db "Welcome to the Accurate Cosines by EN", 10, 0 
    13 00000009 6F2074686520416363-
    13 00000012 757261746520436F73-
    13 0000001B 696E65732062792045-
    13 00000024 4E0A00             
    14 00000027 5468652074696D6520-         timePhrase db "The time is now ", 0
    14 00000030 6973206E6F772000   
    15 00000038 20746963730A00              timePhrase2 db " tics", 10, 0
    16 0000003F 596F7520656E746572-         enteredPhrase db "You entered ", 0
    16 00000048 65642000           
    17 0000004C 546865206571756976-         equivalentPhrase db "The equivalent radians is ", 0
    17 00000055 616C656E7420726164-
    17 0000005E 69616E732069732000 
    18 00000067 54686520636F73696E-         cosinePhrase db "The cosine of those degrees is ", 0
    18 00000070 65206F662074686F73-
    18 00000079 652064656772656573-
    18 00000082 2069732000         
    19 00000087 5468652074696D6520-         secondsPhrase db "The time is now ", 0 
    19 00000090 6973206E6F772000   
    20 00000098 207365636F6E647300          secondsPhrase2 db " seconds", 0
    21                                  
    22                                  
    23                                  section .bss
    24                                      stdout equ 1
    25                                      sys_write equ 1 
    26                                      welcome equ 39
    27                                      time1 equ 16
    28                                  
    29                                  section .text
    30                                  _start:
    31                                  ;========================= Backing up all 64 bit registers =========================
    32 00000000 55                      push rbp
    33 00000001 4889E5                  mov  rbp,rsp
    34 00000004 57                      push rdi                                                    
    35 00000005 56                      push rsi                                                    
    36 00000006 52                      push rdx                                                   
    37 00000007 51                      push rcx                                                    
    38 00000008 4150                    push r8                                                     
    39 0000000A 4151                    push r9                                                     
    40 0000000C 4152                    push r10                                                    
    41 0000000E 4153                    push r11                                                  
    42 00000010 4154                    push r12                                                   
    43 00000012 4155                    push r13                                                   
    44 00000014 4156                    push r14                                                   
    45 00000016 4157                    push r15                                                    
    46 00000018 53                      push rbx                                                    
    47 00000019 9C                      pushf   
    48                                  ;======================== Loop to get the string lenth ========================
    49                                  ; mov rax, 0 
    50                                  ; mov rdi, welcome
    51                                  ; call strlen
    52                                  ; mov r15, rax
    53                                  
    54                                  ;======================== Printing out the welcome prompt ========================
    55 0000001A B801000000              mov rax, sys_write
    56 0000001F BF01000000              mov rdi, stdout 
    57 00000024 48BE-                   mov rsi, welcomePhrase
    57 00000026 [0000000000000000] 
    58 0000002E 4C89FA                  mov rdx, r15 
    59 00000031 0F05                    syscall 
    60                                  ; end block 
    61                                  
    62                                  ;======================== Holding off with the time module ========================
    63                                  ; mov rax, sys_write
    64                                  ; mov rdi, stdout 
    65                                  ; mov rsi, timePhrase
    66                                  ; mov rdx, time1 ; This prints "The time is now " without a newline at the end 
    67                                  ; syscall
    68                                  ; end block
    69                                  
    70                                  ;======================== Receive the input ========================
    71                                  
    72                                  
    73                                  
    74                                  ;======================== Ending this dumb program ========================
    75 00000033 B83C000000              mov rax, 60
    76 00000038 BF00000000              mov rdi, 0
    77 0000003D 0F05                    syscall
    78                                  
    79                                  
    80                                  ;========================= Restoring all 64 bit registers for stability and peace among the stack =========================
    81 0000003F 9D                      popf                                                        
    82 00000040 5B                      pop rbx                                                    
    83 00000041 415F                    pop r15                                                    
    84 00000043 415E                    pop r14                                                    
    85 00000045 415D                    pop r13                                                   
    86 00000047 415C                    pop r12                                                     
    87 00000049 415B                    pop r11                                                   
    88 0000004B 415A                    pop r10                                                     
    89 0000004D 4159                    pop r9                                                     
    90 0000004F 4158                    pop r8                                                     
    91 00000051 59                      pop rcx                                                     
    92 00000052 5A                      pop rdx                                                   
    93 00000053 5E                      pop rsi                                                    
    94 00000054 5F                      pop rdi                                                     
    95 00000055 5D                      pop rbp                                                     
    96                                  
    97 00000056 C3                      ret 
